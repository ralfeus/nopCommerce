@using System.Globalization
@using System.Linq
@using Nop.Core.Domain.Payments
@using Nop.Services.Customers
@using Nop.Web.Framework.UI
@model Nop.Plugin.Payments.Deposit.Models.AdminDepositModel

@{
    Layout = "~/Administration/Views/Shared/_AdminLayout.cshtml";
    //page title
    ViewBag.Title = T("Payment.Deposit.CustomerDeposit").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Payments.Deposit");
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content">
    <div class="form-horizontal">
    <div class="panel-group">
    <div class="panel panel-default">
    <div class="panel-body">
        <div id="orders-grid"></div>

    <script>
        $(document).ready(function() {
            $("#orders-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("DepositList", "AdminDeposit"))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        create: {
                            url : "@Html.Raw(Url.Action("AddDeposit", "AdminDeposit"))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        parameterMap: function(data, operation) {
                            if (operation === "update" || operation === "create") {
                                data.TransactionTime = data.TransactionTime.toUTCString();
                            }
                            return data;
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id",
                            fields: {
                                Id: {editable: false, type: "number"},
                                CustomerId: {type: "number"},
                                CustomerName: {type: "string"},
                                StatusId: {type: "number"},
                                TransactionAmount: {type: "number"},
                                TransactionTime: {type: "date"},
                                NewBalance: {editable: false, type: "string"}
                            }
                        }
                    },
                    requestEnd: function(e) {
                        if (e.type == "read") {
                            var response = e.response;
                            if (response) {
                                //store extra data
                                reportAggregates = e.response["ExtraData"];
                            }
                        }
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                editable: {
                    confirmation: "@T("Admin.Common.DeleteConfirmation")",
                    mode: "inline"
                },
                scrollable: false,
                dataBound: onDataBound,
                columns: [
                    {
                        field: "Id",
                        title: "@T("Payment.Deposit.TransactionID")",
                        width: 80
                    },
                    {
                        field: "TransactionTime",
                        title: "@T("Payment.Deposit.TransactionTime")",
                        editor: transactionTimeColumnEditor,
                        width: 150,
                        format: "{0:g}"
                    },
                    {
                        field: "CustomerId",
                        title: "@T("Admin.Common.Customer")",
                        editor: customerColumnEditor,
                        width: 250,
                        template: '#=getCustomerNameById(CustomerId)#'
                    },
                    {
                        field: "TransactionAmount",
                        title: "@T("Payment.Deposit.TransactionAmount")",
                        template: '#=TransactionAmount#'
                    },
                    {
                        field: "StatusId",
                        title: "@T("Payment.Deposit.PaymentStatus")",
                        editor: paymentStatusColumnEditor,
                        width: 150,
                        template: '#=getStatusNameById(StatusId)#'
                    },
                    {
                        field: "NewBalance",
                        title: "@T("Payment.Deposit.NewBalance")"
                    },
                    {
                        command: [
                            {
                                name: "edit",
                                visible: function(dataItem) {
                                    return false;
                                },
                                text: {
                                    edit: "@T("Admin.Common.Edit")",
                                    update: "@T("Admin.Common.Update")",
                                    cancel: "@T("Admin.Common.Cancel")"
                                }
                            },
                            {
                                name: "destroy",
                                text: "@T("Admin.Common.Delete")"
                            }
                        ],
                        width: 200
                    }
                ]
            });
        });
    </script>

        <script type="text/javascript">
            var selectedIds = [];
            var reportAggregates = "";

            $(document).ready(function() {
                //search button
                $('#search-orders').click(function() {
                    //search
                    var grid = $('#orders-grid').data('kendoGrid');
                    grid.dataSource.page(1); //new search. Set page size to 1
                    //grid.dataSource.read(); we already loaded the grid above using "page" function
                    //clear selected checkboxes
                    $('.checkboxGroups').attr('checked', false).change();
                    selectedIds = [];
                    return false;
                });

                $('#mastercheckbox').click(function() {
                    $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                });

                //wire up checkboxes.
                $('#orders-grid').on('change',
                    'input[type=checkbox][id!=mastercheckbox]',
                    function(e) {
                        var $check = $(this);
                        if ($check.is(":checked") == true) {
                            var checked = jQuery.inArray($check.val(), selectedIds);
                            if (checked == -1) {
                                //add id to selectedIds.
                                selectedIds.push($check.val());
                            }
                        } else {
                            var checked = jQuery.inArray($check.val(), selectedIds);
                            if (checked > -1) {
                                //remove id from selectedIds.
                                selectedIds = $.grep(selectedIds,
                                    function(item, index) {
                                        return item != $check.val();
                                    });
                            }
                        }
                        updateMasterCheckbox();
                    });
            });

//            function additionalData() {
//               var data = {
//                   Id: $('#@*Html.FieldIdFor(model => model.Id)*@').val(),
//                   CustomerName: $('#@*Html.FieldIdFor(model => model.CustomerName)*@').val(),
//                   TransactionAmount: $('#@*Html.FieldIdFor(model => model.TransactionAmount)*@').val(),
//                   PaymentStatus: $('#@*Html.FieldIdFor(model => model.Status)*@').val(),
//                   PaymentMethodName: $('#@*Html.FieldIdFor(model => model.PaymentMethodName)*@').val(),
//               };
//               addAntiForgeryToken(data);
//               return data;
//           }

            function onDataBound(e) {
                $('#orders-grid input[type=checkbox][id!=mastercheckbox]').each(function() {
                    var currentId = $(this).val();
                    var checked = jQuery.inArray(currentId, selectedIds);
                    //set checked based on if current checkbox's value is in selectedIds.
                    $(this).attr('checked', checked > -1);
                });

                updateMasterCheckbox();

                //update order totals summary
                if (reportAggregates != "") {
                    for (var key in reportAggregates) {
                        $('#aggregator-profit-block').text(reportAggregates['aggregatorprofit']);
                        $('#aggregator-shipping-block').text(reportAggregates['aggregatorshipping']);
                        $('#aggregator-tax-block').text(reportAggregates['aggregatortax']);
                        $('#aggregator-total-block').text(reportAggregates['aggregatortotal']);
                    }
                }
            }

            function updateMasterCheckbox() {
                var numChkBoxes = $('#orders-grid input[type=checkbox][id!=mastercheckbox]').length;
                var numChkBoxesChecked = $('#orders-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
                $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
            }

            function transactionTimeColumnEditor(container, options) {
                $('<input name="' + options.field + '" />')
                    .appendTo(container)
                    .kendoDateTimePicker();
            }

            var customers = [
                @for (var i = 0; i < Model.Customers.Count; i++)
                {
                    var customer = Model.Customers[i];
                    <text>
                        {
                            Id: @customer.Id,
                            Name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(customer.GetFullName()))"
                        }
                    </text>
                    if (i < Model.Customers.Count - 1)
                    {
                        <text>,</text>
                    }
                }
            ];

            function getCustomerNameById(customerId) {
                for (var idx = 0,
                    length = customers.length;
                    idx < length;
                    idx++) {
                    if (customers[idx].Id === customerId) {
                        return customers[idx].Name;
                    }
                }
                return "";
            }

            function customerColumnEditor(container, options) {
                $('<input name="' + options.field + '" />').appendTo(container).kendoComboBox({
                    autoBind: false,
                    suggest: true,
                    placeholder: "Select customer's name",
                    filter: "contains",
                    index: 1,
                    minLength: 1,
                    dataSource: customers,
                    dataTextField: "Name",
                    dataValueField: "Id"
                });
            }

            var statuses = [
                { Id: 0, Name: "-- Select status --" }
                @foreach (var status in Model.AvailableStatuses)
                {
                    <text>,{
                    Id: @Convert.ToInt16(status),
                    Name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(status.ToString()))"
                    }</text>
                }
            ];

            function getStatusNameById(statusId) {
                for (var idx = 0, length = statuses.length; idx < length; idx++) {
                    if (statuses[idx].Id === statusId) {
                        return statuses[idx].Name;
                    }
                }
                return "";
            }

            function paymentStatusColumnEditor(container, options) {
                $('<input name="' + options.field + '" />')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataSource: statuses,
                        dataTextField: "Name",
                        dataValueField: "Id",
                        index: 1
                    });
            }
        </script>
    </div>
    </div>
    </div>
    </div>
    </div>
}