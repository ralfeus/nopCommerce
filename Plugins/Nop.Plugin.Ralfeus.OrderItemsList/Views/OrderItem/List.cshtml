@model Nop.Plugin.Ralfeus.OrderItemsList.Models.OrderItemsListModel
@using System.Web.Mvc.Html
@using Nop.Web.Framework
@using Nop.Web.Framework.UI

@{
    Layout = "~/Administration/Views/Shared/_AdminLayout.cshtml";
    //page title
    ViewBag.Title = T("Ralfeus.Agent.Order").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Ralfeus.Agent");
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.StartDate)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.StartDate)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.EndDate)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.EndDate)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.ProductId)
                                    </div>
                                    <div class="col-md-8">
                                        <input type="text" id="search-product-name" autocomplete="off" class="form-control" />
                                        <span id="search-product-friendly-name"></span>
                                        <button type="button" id="search-product-clear" class="btn bg-gray" style="display: none; margin-top: 5px;">@T("Admin.Common.Clear")</button>

                                        @Html.TextBoxFor(model => model.ProductId, new { autocomplete = "off", style = "display:none;" })
                                        <script type="text/javascript">
                                            $(document).ready(function() {
                                                $('#search-product-name').autocomplete({
                                                    delay: 500,
                                                    minLength: 3,
                                                    source: '@(Url.Action("ProductSearchAutoComplete"))',
                                                    select: function(event, ui) {
                                                        $('#@Html.FieldIdFor(model => model.ProductId)').val(ui.item.productid);
                                                        $('#search-product-friendly-name').text(ui.item.label);

                                                        $('#search-product-clear').show();
                                                        return false;
                                                    }
                                                });

                                                //remove button
                                                $('#search-product-clear').click(function() {
                                                    $('#@Html.FieldIdFor(model => model.ProductId)').val('0');
                                                    $('#search-product-friendly-name').text('');
                                                    $('#search-product-clear').hide();
                                                    return false;
                                                });
                                            });
                                        </script>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.OrderItemStatusIds)
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.OrderItemStatusIds, new { SelectList = Model.AvailableOrderItemStatuses })
                                </div>
                            </div>
                            <div class="col-md-7">
                                <div class="form-group" @(Model.AvailableStores.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.StoreId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopDropDownList("StoreId", Model.AvailableStores)
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableVendors.SelectionIsNotPossible() ? Html.Raw("style='display: none;'") : null)>
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.VendorId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopDropDownList("VendorId", Model.AvailableVendors)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.PrivateComment)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.PrivateComment)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.PublicComment)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.PublicComment)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-orders" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <table id="order-items-grid">
                            <colgroup>
                                <col id="checkbox"/>
                                <col id="ids"/>
                                <col id="customer"/>
                                <col id="item-description"/>
                                <col id="item-price"/>
                                <col id="item-status"/>
                                <col id="actions"/>
                            </colgroup>
                            <thead>
                            <th/>
                            <th>@T("Ralfeus.OrderItems.Ids")</th>
                            <th>@T("Ralfeus.OrderItems.Customer")</th>
                            <th>@T("Ralfeus.OrderItems.Description")</th>
                            <th>@T("Ralfeus.OrderItems.Price")</th>
                            <th>@T("Ralfeus.OrderItems.Status")</th>
                            <th>@T("Ralfeus.OrderItems.Actions")</th>
                            </thead>
                        </table>
                        <script id="rowTemplate" type="text/x-kendo-tmpl">
            <tr data-uid="#: uid #">
                <td><input type='checkbox' value='#=Id#' class='checkboxGroups'/></td>
                <td>#=Id#<br /><a href=\"" + "@Url.Action("Edit", "Order", new {area = "admin"})" + "/#=OrderId#\">#=OrderId#</a></td>
                <td>#=CustomerName#</td>
                <td>
                    <table>
                        <tr>
                            <td rowspan="2"><img src="" /></td>
                            <td>#=ProductName#</td>
                        </tr>
                        <tr><td>#=ProductAttributes#</td></tr>
                    </table>
                </td>
                <td>#=VendorName#</td>
                <td>#=Price#<br />#=Quantity#<br />#=Weight#</td>
                <td>#=OrderItemStatus#</td>
                <td />
            </tr>
        </script>
                        <script>
                            $(document).ready(function() {
                                $("#order-items-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("OrderItemsList"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            } //,
//                            update: {
//                                url: "@Html.Raw(Url.Action("UpdateOrderItem"))",
//                                type: "POST",
//                                dataType: "json",
//                                data: addAntiForgeryToken
//                            }//,
//                        parameterMap: function(data, operation) {
//                            if (operation === "update" || operation === "create") {
//                                data.TransactionTime = data.TransactionTime.toUTCString();
//                            }
//                            return data;
//                        }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    Id: { editable: false },
                                                    OrderItemId: { editable: false },
                                                    Price: { type: "number" },
                                                    Comment: { editable: false },
                                                    CustomerName: { editable: false },
                                                    ImagePath: { editable: false },
                                                    ItemName: { editable: false },
                                                    ItemUrl: { editable: false },
                                                    OrderId: { editable: false },
                                                    Quantity: { editable: false },
                                                    SourceShopName: { editable: false },
                                                    StatusId: { type: "number", field: "StatusId" }
                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if (e.type === "read") {
                                                var response = e.response;
                                                if (response) {
                                                    //store extra data
                                                    reportAggregates = e.response["ExtraData"];
                                                }
                                            } else if (e.type === "update" || e.type === "create") {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    rowTemplate: kendo.template($("#rowTemplate").html()),
                                    editable: {
                                        mode: "inline"
                                    },
                                    scrollable: false,
//                dataBound: onDataBound,
                                    columns: [
                                        {
                                            command: [
                                                {
                                                    name: "edit",
                                                    text: {
                                                        edit: "@T("Admin.Common.Edit")",
                                                        update: "@T("Admin.Common.Update")",
                                                        cancel: "@T("Admin.Common.Cancel")"
                                                    }
                                                }
//                            {
//                                name: "approve",
//                                visible: isTransactionPending,
//                                text: "@T("Admin.Common.Approve")",
//                                click: approveTransaction
//                            }
                                            ]
                                        }
                                    ]
                                });
                            });

                            var statuses = [
                                @Html.Raw(string.Join(",", Model.AvailableOrderItemStatuses.Select(s => string.Format("{{value:{0}, text:\"{1}\"}}", s.Value, s.Text))))
                            ];
                        </script>
                    </div>
                </div>
            </div>
    </div>
    </div>
}